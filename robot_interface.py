import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk
import os
import requests
import json

API_URL = "http://192.168.0.104:8000"  # –ê–¥—Ä–µ—Å FastAPI-—Å–µ—Ä–≤–µ—Ä–∞


def load_settings():
    try:
        with open('settings.json', 'r') as f:
            return json.load(f)
    except:
        return {  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'bg_color': '#FFE4E1',
            'text_color': '#8B4513',
            'btn_color': '#FF69B4',
            'num_color': '#FF1493'
        }

class CatQueueApp:
    def __init__(self, root):
        self.settings = load_settings()
        self.root = root
        self.root.title("Chatty Queue")
        self.root.geometry("800x600")
        self.current_frame = None
        self.qr_image_path = "qr_bot.jpg"  # –ü—É—Ç—å –∫ QR-–∫–æ–¥—É
        self.return_timer = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ç–∞–π–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª QR-–∫–æ–¥–∞
        if not os.path.exists(self.qr_image_path):
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª QR-–∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.qr_image_path}")
            self.root.destroy()
            return

        self.setup_ui()

    def setup_ui(self):
        self.bg_color = self.settings['bg_color']
        self.btn_color = self.settings['btn_color']
        self.text_color = self.settings['text_color']
        self.num_color = self.settings['num_color']

        # –ó–∞–≥—Ä—É–∂–∞–µ–º QR-–∫–æ–¥ –∑–∞—Ä–∞–Ω–µ–µ
        try:
            self.qr_image = Image.open(self.qr_image_path)
            self.qr_photo = ImageTk.PhotoImage(self.qr_image.resize((250, 250), Image.LANCZOS))
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å QR-–∫–æ–¥: {str(e)}")
            self.root.destroy()
            return

        self.show_welcome_frame()

    def clear_frame(self):
        if self.current_frame:
            if self.return_timer:
                self.root.after_cancel(self.return_timer)
                self.return_timer = None
            self.current_frame.pack_forget()
            self.current_frame.destroy()

    def schedule_return(self, delay_seconds=10):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        if self.return_timer:
            self.root.after_cancel(self.return_timer)
        self.return_timer = self.root.after(delay_seconds * 1000, self.show_welcome_frame)

    def show_welcome_frame(self):
        self.clear_frame()
        self.current_frame = tk.Frame(self.root, bg=self.bg_color)
        self.current_frame.pack(fill="both", expand=True)

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–æ—Ç–∏–∫–æ–º
        tk.Label(self.current_frame, text="üê±", font=("Arial", 120), bg=self.bg_color, fg=self.text_color).pack(
            pady=(120, 20))
        tk.Label(self.current_frame, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                 font=("Arial", 24, "bold"), bg=self.bg_color, fg=self.text_color).pack(pady=10)

        ttk.Button(self.current_frame, text="–ó–∞–Ω—è—Ç—å –æ—á–µ—Ä–µ–¥—å", command=self.show_name_frame,
                   style="Pink.TButton").pack(pady=30, ipadx=20, ipady=10)

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        style = ttk.Style()
        style.theme_use('clam')
        style.configure("Pink.TButton", background=self.btn_color, foreground="black",
                        font=("Arial", 12, "bold"))

        style.map('Pink.TButton',
                  background=[('active', self.btn_color),
                              ('disabled', self.btn_color)],
                  foreground=[('pressed', 'black'),
                              ('active', 'black')])

    def show_name_frame(self):
        self.clear_frame()
        self.current_frame = tk.Frame(self.root, bg=self.bg_color)
        self.current_frame.pack(fill="both", expand=True)

        tk.Label(self.current_frame, text="–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
                 font=("Arial", 20), bg=self.bg_color, fg=self.text_color).pack(pady=(210, 20))

        self.name_entry = ttk.Entry(self.current_frame, font=("Arial", 14))
        self.name_entry.pack(pady=10, ipadx=50, ipady=8)

        ttk.Button(self.current_frame, text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", command=self.show_queue_info,
                   style="Pink.TButton").pack(pady=30, ipadx=20, ipady=10)

    def show_queue_info(self):
        name = self.name_entry.get().strip()
        if not name:
            messagebox.showwarning("–û–π!", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
            return

        try:
            response = requests.post(
                f"{API_URL}/join",
                json={"name": name}
            )
            if response.status_code == 200:
                data = response.json()

                self.clear_frame()
                self.current_frame = tk.Frame(self.root, bg=self.bg_color)
                self.current_frame.pack(fill="both", expand=True)

                tk.Label(self.current_frame, text=f"{name}, –≤–∞—à –Ω–æ–º–µ—Ä:",
                         font=("Arial", 20), bg=self.bg_color, fg=self.text_color).pack(pady=(120, 20))

                tk.Label(self.current_frame, text=str(data['user_id']),
                         font=("Arial", 48, "bold"), bg=self.bg_color, fg=self.num_color).pack(pady=10)

                tk.Label(self.current_frame, text=f"–ü–µ—Ä–µ–¥ –≤–∞–º–∏: {data['position'] - 1} —á–µ–ª–æ–≤–µ–∫",
                         font=("Arial", 14), bg=self.bg_color, fg=self.text_color).pack(pady=20)

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ QR-–∫–æ–¥—É
                ttk.Button(self.current_frame, text="–£–∑–Ω–∞—Ç—å –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –≤ Telegram",
                           command=self.show_qr_frame,
                           style="Pink.TButton").pack(pady=10, ipadx=20, ipady=10)

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
                ttk.Button(self.current_frame, text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é",
                           command=self.show_welcome_frame,
                           style="Pink.TButton").pack(pady=10, ipadx=20, ipady=10)

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                self.schedule_return(10)

            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.text}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")

    def show_qr_frame(self):
        self.clear_frame()
        self.current_frame = tk.Frame(self.root, bg=self.bg_color)
        self.current_frame.pack(fill="both", expand=True)

        tk.Label(self.current_frame, text="–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n—á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É",
                 font=("Arial", 16), bg=self.bg_color, fg=self.text_color).pack(pady=(80, 20))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π QR-–∫–æ–¥
        tk.Label(self.current_frame, image=self.qr_photo, bg=self.bg_color).pack(pady=10)

        tk.Label(self.current_frame, text="@chatty_queue_bot",
                 font=("Arial", 14), bg=self.bg_color, fg=self.text_color).pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
        ttk.Button(self.current_frame, text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é",
                   command=self.show_welcome_frame,
                   style="Pink.TButton").pack(pady=20, ipadx=20, ipady=10)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        self.schedule_return(20)


if __name__ == "__main__":
    root = tk.Tk()
    app = CatQueueApp(root)
    root.mainloop()
