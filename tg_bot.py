import httpx
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import Config

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = Config.TOKEN
API_URL = "http://192.168.0.104:8000"
ADMINS = [int(i) for i in Config.ADMINS.split(",")]
NOTIFY_BEFORE = 3  # –£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ 3 –ø–æ–∑–∏—Ü–∏–∏ –¥–æ –æ—á–µ—Ä–µ–¥–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class UserStates(StatesGroup):
    waiting_for_queue_id = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ queue_id


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}  # {chat_id: {"queue_id": int, "name": str}}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(is_admin=False):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["/position", "/leave"]
    if is_admin:
        buttons.extend(["/list", "/next"])
    markup.add(*buttons)
    return markup


# API –∫–ª–∏–µ–Ω—Ç
async def api_request(method: str, endpoint: str, data=None):
    async with httpx.AsyncClient() as client:
        try:
            if method == "GET":
                response = await client.get(f"{API_URL}{endpoint}")
            elif method == "POST":
                response = await client.post(f"{API_URL}{endpoint}", json=data)
            return response.json()
        except httpx.RequestError:
            return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'], state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/list - –≤—Å—è –æ—á–µ—Ä–µ–¥—å\n"
            "/next - –≤—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ",
            reply_markup=get_main_keyboard(is_admin=True)
        )
        await state.finish()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π queue_id
    if message.from_user.id in user_data:
        await message.answer(
            "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /position –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
            reply_markup=get_main_keyboard()
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ queue_id
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä (user_id):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await UserStates.waiting_for_queue_id.set()


@dp.message_handler(state=UserStates.waiting_for_queue_id)
async def process_queue_id(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ:")
        return

    queue_id = int(message.text)
    response = await api_request("GET", f"/status/{queue_id}")

    if not response or "position" not in response:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[message.from_user.id] = {"queue_id": queue_id}

    await message.answer(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!\n"
        f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {response['position']}",
        reply_markup=get_main_keyboard()
    )
    await state.finish()


@dp.message_handler(commands=['position'])
async def cmd_position(message: types.Message):
    if message.from_user.id not in user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–æ–ª–∫–ª—é—á–µ–Ω–∏—è")
        return

    queue_id = user_data[message.from_user.id]["queue_id"]
    response = await api_request("GET", f"/status/{queue_id}")

    if not response or "position" not in response:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—á–µ—Ä–µ–¥–∏")
        return

    position = response["position"]
    if position == 1:
        status = "–°–µ–π—á–∞—Å –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!"
    elif position <= NOTIFY_BEFORE:
        status = "–í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å —Å–∫–æ—Ä–æ –ø–æ–¥–æ–π–¥—ë—Ç!"

    await message.answer(
        f"üìç –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {position}\n"
        f"{status}",
        reply_markup=get_main_keyboard(is_admin=message.from_user.id in ADMINS)
    )


@dp.message_handler(commands=['leave'])
async def cmd_leave(message: types.Message):
    if message.from_user.id not in user_data:
        await message.answer("‚ùå –í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏")
        return

    queue_id = user_data[message.from_user.id]["queue_id"]
    response = await api_request("POST", f"/leave/{queue_id}", {})

    if response and "success" in response:
        del user_data[message.from_user.id]
        await message.answer("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")


@dp.message_handler(commands=['list'])
async def cmd_list(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    response = await api_request("GET", "/queue")
    if not response or "queue" not in response:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏")
        return

    queue_list = []
    for index, user in enumerate(response["queue"]):
        queue_list.append(f"{index + 1}. {user['name']} (ID: {user['user_id']})")

    await message.answer(
        "üìã –¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n" + "\n".join(queue_list))


@dp.message_handler(commands=['next'])
async def cmd_next(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ API
    response = await api_request("GET", "/next")

    if not response or "user_id" not in response:
        await message.answer("‚ùå –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_msg = (
        f"‚úÖ –°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
        f"üî¢ –ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: {response['user_id']}\n"
        f"üë§ –ò–º—è: {response['name']}"
    )

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
    for chat_id, data in list(user_data.items()):
        if data["queue_id"] == response["user_id"]:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_message(
                    chat_id,
                    "üéâ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –ø–æ–¥–æ—à–ª–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–π–¥–∏—Ç–µ –∫ —Å—Ç–æ–π–∫–µ."
                )
                del user_data[chat_id]  # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            except:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º
                del user_data[chat_id]
            break

    await message.answer(admin_msg, reply_markup=get_main_keyboard(is_admin=True))

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏
async def check_queue_and_notify():
    for chat_id, data in user_data.items():
        queue_id = data["queue_id"]
        response = await api_request("GET", f"/status/{queue_id}")

        if not response or "position" not in response:
            continue

        position = response["position"]
        if 1 < position <= NOTIFY_BEFORE + 1:
            try:
                await bot.send_message(
                    chat_id,
                    f"üîî –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è! –í—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {position}.",
                    reply_markup=get_main_keyboard(is_admin=chat_id in ADMINS)
                )
            except:
                del user_data[chat_id]  # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞


async def scheduler():
    while True:
        await check_queue_and_notify()
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥


async def on_startup(dp):
    asyncio.create_task(scheduler())


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
